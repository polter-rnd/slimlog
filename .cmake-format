# --------------------------
# General Formatting Options
# --------------------------
# How wide to allow formatted cmake files
line_width = 100

# How many spaces to tab for indent
tab_size = 4

# If an argument group contains more than this many sub-groups (parg or kwarg
# groups), then force it to a vertical layout.
max_subgroups_hwrap = 2

# If a positional argument group contains more than this many arguments, then
# force it to a vertical layout.
max_pargs_hwrap = 6

# If true, separate flow control names from their parentheses with a space
separate_ctrl_name_with_space = False

# If true, separate function names from parentheses with a space
separate_fn_name_with_space = False

# If a statement is wrapped to more than one line, than dangle the closing
# parenthesis on its own line.
dangle_parens = True

# If the trailing parenthesis must be 'dangled' on its on line, then align it to
# this reference: `prefix`: the start of the statement,  `prefix-indent`: the
# start of the statement, plus one indentation  level, `child`: align to the
# column of the arguments
dangle_align = 'prefix'

# If the statement spelling length (including space and parenthesis) is smaller
# than this amount, then force reject nested layouts.
min_prefix_chars = 4

# If the statement spelling length (including space and parenthesis) is larger
# than the tab width by more than this amount, then force reject un-nested
# layouts.
max_prefix_chars = 10

# If a candidate layout is wrapped horizontally but it exceeds this many lines,
# then reject the layout.
max_lines_hwrap = 2

# What style line endings to use in the output.
line_ending = 'unix'

# Format command names consistently as 'lower' or 'upper' case
command_case = 'lower'

# Format keywords consistently as 'lower' or 'upper' case
keyword_case = 'unchanged'

# Specify structure for custom cmake functions
additional_commands = {
   'add_clang_code_format_targets': {
      'kwargs': {
         'CHECK_TARGET': 1,
         'EXCLUDE_DIRS': '+',
         'FORMAT_TARGET': 1,
         'SOURCE_DIRS': '+'
      },
      'pargs': {
         'flags': [],
         'nargs': '*'
      }
   },
   'add_cmake_code_format_targets': {
      'kwargs': {
         'CHECK_TARGET': 1,
         'EXCLUDE_DIRS': '+',
         'FORMAT_TARGET': 1,
         'SOURCE_DIRS': '+'
      },
      'pargs': {
         'flags': [],
         'nargs': '*'
      }
   },
   'add_code_format_targets': {
      'kwargs': {
         'CHECK_TARGET': 1,
         'EXCLUDE_DIRS': '+',
         'FORMAT_TARGET': 1,
         'SOURCE_DIRS': '+'
      },
      'pargs': {
         'flags': [],
         'nargs': '*'
      }
   },
   'add_gcovr_coverage_target': {
      'kwargs': {
         'CHECK_TARGET': 1,
         'COVERAGE_INIT_TARGET': 1,
         'COVERAGE_TARGET': 1,
         'GCOVR_EXCLUDE': '+',
         'GCOVR_FILTER': '+',
         'GCOVR_OPTIONS': '+',
         'GCOV_LANGUAGES': '+',
         'OUTPUT_DIRECTORY': 1
      },
      'pargs': {
         'flags': [
            'HTML',
            'COBERTURA',
            'COVERALLS',
            'SONARQUBE'
         ],
         'nargs': '*'
      }
   },
   'check_compiler_flags': {
      'pargs': {
         'nargs': 3
      }
   },
   'check_compiler_flags_list': {
      'pargs': {
         'nargs': 3
      }
   },
   'dump_option_variables': {
      'pargs': {
         'nargs': 1
      }
   },
   'target_enable_static_analysis': {
      'kwargs': {
         'CLANG_TIDY_EXTRA_ARGS': '+',
         'CPPCHECK_EXTRA_ARGS': '+',
         'IWYU_EXTRA_ARGS': '+'
      },
      'pargs': {
         'flags': [],
         'nargs': '*'
      }
   },
   'find_package_switchable': {
      'kwargs': {
         'DEFAULT': 1,
         'DESCRIPTION': 1,
         'MIN_VERSION': 1,
         'OPTION': 1,
         'PURPOSE': 1
      },
      'pargs': {
         'flags': [],
         'nargs': '1+'
      }
   },
   'get_lang_of_source': {
      'pargs': {
         'nargs': 2
      }
   },
   'get_target_compilers': {
      'pargs': {
         'nargs': 3
      }
   },
   'parse_cmake_documentation': {
      'kwargs': {
         'END_FLAG': 1,
         'EXCLUDES': '+',
         'INCLUDES': '+',
         'START_FLAG': 1
      },
      'pargs': {
         'flags': [],
         'nargs': '*'
      }
   },
   'process_cmake_documentation': {
      'pargs': {
         'nargs': 3
      }
   },
   'sanitizer_add_blacklist_file': {
      'pargs': {
         'nargs': 1
      }
   },
   'sanitizer_add_flags': {
      'pargs': {
         'nargs': 4
      }
   },
   'set_directory_hints': {
      'kwargs': {
         'HINTS': '+'
      },
      'pargs': {
         'flags': [],
         'nargs': '1+'
      }
   },
   'set_versioned_compiler_names': {
      'kwargs': {
         'COMPILER': 1,
         'LANGS': '+',
         'NAMES': '+'
      },
      'pargs': {
         'flags': [],
         'nargs': '1+'
      }
   },
   'target_enable_coverage': {
      'pargs': {
         'nargs': 1
      }
   },
   'target_enable_sanitizers': {
      'pargs': {
         'nargs': 1
      }
   },
   'write_cmake_documentation': {
      'kwargs': {
         'FOOTER': 1,
         'HEADER': 1
      },
      'pargs': {
         'flags': [
            'SORTED'
         ],
         'nargs': '1+'
      }
   }
}

# A list of command names which should always be wrapped
always_wrap = []

# If true, the argument lists which are known to be sortable will be sorted
# lexicographicall
enable_sort = True

# If true, the parsers may infer whether or not an argument list is sortable
# (without annotation).
autosort = False

# By default, if cmake-format cannot successfully fit everything into the
# desired linewidth it will apply the last, most agressive attempt that it made.
# If this flag is True, however, cmake-format will print error, exit with non-
# zero status code, and write-out nothing
require_valid_layout = False

# A dictionary containing any per-command configuration overrides. Currently
# only `command_case` is supported.
per_command = {}

# A dictionary mapping layout nodes to a list of wrap decisions. See the
# documentation for more information.
layout_passes = {}

# ------------------------------------
# Options affecting comment formatting
# ------------------------------------
# What character to use for bulleted lists
bullet_char = '*'

# What character to use as punctuation after numerals in an enumerated list
enum_char = '.'

# If comment markup is enabled, don't reflow the first comment block in each
# listfile. Use this to preserve formatting of your copyright/license
# statements.
first_comment_is_literal = False

# If comment markup is enabled, don't reflow any comment block which matches
# this (regex) pattern. Default is `None` (disabled).
literal_comment_pattern = '\\s*\\[cmake_documentation\\].*'

# Regular expression to match preformat fences in comments
# default=r'^\s*([`~]{3}[`~]*)(.*)$'
fence_pattern = '^\\s*([`~]{3}[`~]*)(.*)$'

# Regular expression to match rulers in comments
# default=r'^\s*[^\w\s]{3}.*[^\w\s]{3}$'
ruler_pattern = '^\\s*[^\\w\\s]{3}.*[^\\w\\s]{3}$'

# If a comment line starts with at least this many consecutive hash characters,
# then don't lstrip() them off. This allows for lazy hash rulers where the first
# hash char is not separated by space
hashruler_min_length = 10

# If true, then insert a space between the first hash char and remaining hash
# chars in a hash ruler, and normalize its length to fill the column
canonicalize_hashrulers = False

# Enable comment markup parsing and reflow
enable_markup = True

# ---------------------
# Linter options
# ---------------------
# C0103: Invalid variable name
# C0113: Missing COMMENT in statement which allows it
disabled_codes = ['C0103', 'C0113']

# Regular expression pattern describing valid function names
function_pattern = '[a-z_]+'

# Regular expression pattern describing valid macro names
macro_pattern = '[a-z_]+'

# Maximum branches
max_branches = 20

# Maximum statements
max_statements = 80

# Require no more than this many newlines between statements
max_statement_spacing = 2

# ---------------------
# Miscellaneous options
# ---------------------
# If true, emit the unicode byte-order mark (BOM) at the start of the file
emit_byteorder_mark = False

# Specify the encoding of the input file. Defaults to utf-8.
input_encoding = 'utf-8'

# Specify the encoding of the output file. Defaults to utf-8. Note that cmake
# only claims to support utf-8 so be careful when using anything else
output_encoding = 'utf-8'

# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  formatcheck:
    runs-on: ubuntu-latest
    permissions:
      actions: write
    steps:
    - uses: actions/checkout@v4

    - name: Install apt dependencies
      run: sudo apt-get install -y clang-format cmake-format

    - name: Configure CMake
      run: >
        cmake -S ${{ github.workspace }} -B ${{ github.workspace }}/build
        -DENABLE_FORMATTERS=ON -DENABLE_FMTLIB_HO=OFF

    - name: Check formatting
      run: cmake --build ${{ github.workspace }}/build --target formatcheck

  build:
    env:
      CC: ${{ matrix.c_compiler }}
      CXX: ${{ matrix.cpp_compiler }}
      # On Clang build and link with libc++
      CXXFLAGS: ${{ matrix.c_compiler == 'clang' && '-stdlib=libc++' || '' }}
      LDFLAGS: ${{ matrix.c_compiler == 'clang' && '-lc++abi' || '' }}
      # False positive: https://github.com/llvm/llvm-project/issues/59432
      ASAN_OPTIONS: ${{ matrix.c_compiler == 'clang' && 'alloc_dealloc_mismatch=0' || '' }}
      # Set the build type to Debug for code coverage
      CMAKE_BUILD_TYPE: Debug
      # Set the commit hashes for dependent tools
      IWYU_COMMIT: 30e221fad0967aa6bcb279600127748ed3dab7ad
      METTLE_COMMIT: 37f7ff840ed2ab9be7e5f0d44be97a601686d8db

    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations.
      # Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [ubuntu-24.04, windows-2022, macos-15]
        c_compiler: [gcc, clang, cl]
        format_lib: [fmtlib, std]
        include:
          - os: windows-2022
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-24.04
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-24.04
            c_compiler: clang
            cpp_compiler: clang++
          - os: macos-15
            c_compiler: clang
            cpp_compiler: clang++
        exclude:
          - os: windows-2022
            c_compiler: gcc
          - os: windows-2022
            c_compiler: clang
          - os: ubuntu-24.04
            c_compiler: cl
          - os: macos-15
            c_compiler: gcc
          - os: macos-15
            c_compiler: cl
          - os: macos-15
            format_lib: std

    steps:
    - uses: actions/checkout@v4

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"
        echo "mettle-dir=${{ runner.tool_cache }}/mettle" >> "$GITHUB_OUTPUT"
        echo "iwyu-dir=${{ runner.tool_cache }}/iwyu" >> "$GITHUB_OUTPUT"

    - name: Add dependencies to PATH
      # Add paths to the mettle and include-what-you-use binaries to the PATH
      shell: bash
      run: |
        echo "${{ steps.strings.outputs.iwyu-dir }}/bin" >> "$GITHUB_PATH"
        echo "${{ steps.strings.outputs.mettle-dir }}/build/src" >> "$GITHUB_PATH"
        echo "${{ steps.strings.outputs.mettle-dir }}/build/src/${{ env.CMAKE_BUILD_TYPE }}" \
          >> "$GITHUB_PATH"

    - name: Add Xcode toolchain to PATH (MacOS)
      if: runner.os == 'MacOS'
      run: |
        printf "%s%s\n" "/Applications/Xcode.app/Contents/Developer/Toolchains/" \
                        "XcodeDefault.xctoolchain/usr/bin" >> "$GITHUB_PATH"

    - name: Export GitHub Actions environment variables
      uses: actions/github-script@v7
      with:
        script: |
          core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');
          core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');
          core.exportVariable('CMAKE_TOOLCHAIN_FILE', process.env.VCPKG_INSTALLATION_ROOT
            ? process.env.VCPKG_INSTALLATION_ROOT +  '/scripts/buildsystems/vcpkg.cmake'
            : '');

    - name: Setup MSVC command line tools (Windows)
      uses: ilammy/msvc-dev-cmd@v1
      if: runner.os == 'Windows'
      with:
        arch: x64

    - name: Install apt dependencies (Linux)
      if: runner.os == 'Linux'
      run: >
        sudo apt-get install -y libc++-dev libc++abi-dev clang-tidy cppcheck gcovr

    - name: Install vcpkg dependencies (Windows, Linux)
      if: runner.os != 'MacOS'
      env:
        VCPKG_BINARY_SOURCES: "clear;x-gha,readwrite"
      run: >
        vcpkg install
        ${{ matrix.format_lib == 'std' && '' || 'fmt' }} boost-program-options boost-iostreams

    - name: Install brew dependencies (MacOS)
      if: runner.os == 'MacOS'
      run: >
        brew install ${{ matrix.format_lib == 'std' && '' || 'fmt' }} boost gcovr

    - name: Cache include-what-you-use
      id: cache-iwyu
      uses: actions/cache@v4
      with:
        path: ${{ steps.strings.outputs.iwyu-dir }}
        key: ${{ matrix.os }}-iwyu-${{ env.IWYU_COMMIT }}

    - name: Build include-what-you-use (Linux)
      if: runner.os == 'Linux' && steps.cache-iwyu.outputs.cache-hit != 'true'
      env:
        GIT_REPO: https://github.com/include-what-you-use/include-what-you-use.git
        SRC_DIR: ${{ runner.temp }}/iwyu
        CMAKE_INSTALL_PREFIX: ${{ steps.strings.outputs.iwyu-dir }}
        CMAKE_BUILD_TYPE: Release
      run: |
        sudo apt-get install clang-19 libclang-19-dev
        git clone ${{ env.GIT_REPO }} ${{ env.SRC_DIR }}
        git -C ${{ env.SRC_DIR }} checkout ${{ env.IWYU_COMMIT }}
        cmake -S ${{ env.SRC_DIR }} -B ${{ env.SRC_DIR }}/build \
              -DCMAKE_C_COMPILER=clang-19 \
              -DCMAKE_CXX_COMPILER=clang++-19 \
              -DCMAKE_CXX_FLAGS='' \
              -DCMAKE_EXE_LINKER_FLAGS='' \
              -DCMAKE_PREFIX_PATH=/usr/lib/llvm-19 \
              -DIWYU_LINK_CLANG_DYLIB=OFF \
              -DIWYU_RESOURCE_RELATIVE_TO=iwyu \
              -DIWYU_RESOURCE_DIR=../share/include-what-you-use
        cmake --build ${{ env.SRC_DIR }}/build --target install --parallel

    - name: Cache mettle
      id: cache-mettle
      uses: actions/cache@v4
      with:
        path: ${{ steps.strings.outputs.mettle-dir }}
        key: ${{ matrix.os }}-${{ matrix.c_compiler }}-mettle-${{ env.METTLE_COMMIT }}

    - name: Build mettle
      if: steps.cache-mettle.outputs.cache-hit != 'true'
      env:
        GIT_REPO: https://github.com/polter-rnd/mettle.git
        SRC_DIR: ${{ steps.strings.outputs.mettle-dir }}
      run: |
        git clone ${{ env.GIT_REPO }} ${{ env.SRC_DIR }}
        cmake -S ${{ env.SRC_DIR }} -B ${{ env.SRC_DIR }}/build  -DBUILD_SHARED_LIBS=ON
        cmake --build ${{ env.SRC_DIR }}/build

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >
        cmake
        -S ${{ github.workspace }}
        -B ${{ steps.strings.outputs.build-output-dir }}
        -DENABLE_ANALYZERS=ON
        -DENABLE_SANITIZERS=ON
        -DBUILD_TESTING=ON
        -Dmettle_DIR=${{ steps.strings.outputs.mettle-dir }}/build
        ${{ matrix.format_lib == 'std' && '-DENABLE_FMTLIB_HO=OFF' || '' }}

    - name: Build
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --parallel

    - name: Unit Tests
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      # Execute tests defined by the CMake configuration.
      # Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest --verbose --build-config ${{ env.CMAKE_BUILD_TYPE }}

    - name: Annotate with JUnit test results
      if: ${{ !cancelled() }}
      uses: mikepenz/action-junit-report@v5
      with:
        annotate_only: true
        job_summary: false
        check_title_template: "Failed test: {{BREAD_CRUMB}}{{SUITE_NAME}}/{{TEST_NAME}}"
        report_paths: ${{ steps.strings.outputs.build-output-dir }}/test/*.xml

    - name: Upload test results to Codecov
      if: ${{ !cancelled() }}
      uses: codecov/test-results-action@v1
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        flags: ${{ matrix.os }}-${{ matrix.c_compiler }}-${{ matrix.format_lib }}
        directory: ${{ steps.strings.outputs.build-output-dir }}/test
        fail_ci_if_error: true

    - name: Code Coverage (Linux, MacOS)
      if: runner.os != 'Windows'
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --target coverage

    - name: Upload coverage reports to Codecov (Linux, MacOS)
      if: runner.os != 'Windows'
      uses: codecov/codecov-action@v5
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        flags: ${{ matrix.os }}-${{ matrix.c_compiler }}-${{ matrix.format_lib }}
        directory: ${{ steps.strings.outputs.build-output-dir }}/coverage
        fail_ci_if_error: true

    - name: Upload Artifacts
      uses: actions/upload-artifact@v4
      if: ${{ !cancelled() }}
      with:
        name: slimlog-${{ matrix.os }}-${{ matrix.c_compiler }}-${{ matrix.format_lib }}
        path: |
          ${{ steps.strings.outputs.build-output-dir }}/test/*.xml
          ${{ steps.strings.outputs.build-output-dir }}/coverage

  report:
    runs-on: ubuntu-latest
    needs: build
    if: ${{ !cancelled() }}

    steps:
    - name: Download and Extract Artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Gather unit test reports
      id: reports
      run: |
        echo EOF
        {
          echo 'names<<EOF'
          for i in artifacts/*; do
            [ -d "$i/test" ] && basename "$i"
          done
          echo EOF
        } >> "$GITHUB_OUTPUT"
        {
          echo 'paths<<EOF'
          for i in artifacts/*; do
            [ -d "$i/test" ] && echo "$i/test/*.xml"
          done
          echo EOF
        } >> "$GITHUB_OUTPUT"

    - name: Generate JUnit test summary
      uses: mikepenz/action-junit-report@v5
      with:
        annotate_only: true
        skip_annotations: true
        include_time_in_summary: true
        verbose_summary: false
        include_passed: true
        check_name: ${{ steps.reports.outputs.names }}
        report_paths: ${{ steps.reports.outputs.paths }}

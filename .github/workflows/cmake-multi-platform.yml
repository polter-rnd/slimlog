# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake on multiple platforms

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [ubuntu-24.04, windows-2022, macos-15]
        build_type: [Debug]
        c_compiler: [gcc, clang, cl]
        format_lib: [fmtlib, std]
        include:
          - os: windows-2022
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-24.04
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-24.04
            c_compiler: clang
            cpp_compiler: clang++-19
          - os: macos-15
            c_compiler: clang
            cpp_compiler: clang++
        exclude:
          - os: windows-2022
            c_compiler: gcc
          - os: windows-2022
            c_compiler: clang
          - os: ubuntu-24.04
            c_compiler: cl
          - os: macos-15
            c_compiler: gcc
          - os: macos-15
            c_compiler: cl
          - os: macos-15
            format_lib: std

    steps:
    - uses: actions/checkout@v4

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Export GitHub Actions cache environment variables
      uses: actions/github-script@v7
      with:
        script: |
          core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');
          core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');

    - name: Install dependencies (Linux)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get install -y clang-tidy-19 clang-format-19 libclang-19-dev \
                                libc++-dev libc++abi-dev libfmt-dev cmake-format cppcheck

    - name: Cache IWYU (Linux)
      id: cache-iwyu
      uses: actions/cache@v4
      with:
        path: /opt/iwyu
        key: ${{ runner.os }}-iwyu-clang19

    - name: Install IWYU (Linux)
      if: runner.os == 'Linux' && steps.cache-iwyu.outputs.cache-hit != 'true'
      run: |
        cd ..
        git clone https://github.com/include-what-you-use/include-what-you-use.git -b clang_19
        cd include-what-you-use
        mkdir build && cd build
        cmake -DCMAKE_PREFIX_PATH=/usr/lib/llvm-19 \
              -DIWYU_RESOURCE_RELATIVE_TO=iwyu \
              -DIWYU_RESOURCE_DIR=../share/include-what-you-use \
              -DCMAKE_INSTALL_PREFIX=/opt/iwyu ..
        make -j && sudo make install

    - name: Install dependencies (Windows)
      if: runner.os == 'Windows' && matrix.format_lib == 'fmtlib'
      env:
        VCPKG_BINARY_SOURCES: "clear;x-gha,readwrite"
      run: |
        vcpkg install fmt
        vcpkg integrate install

    - name: Install dependencies (MacOS)
      if: runner.os == 'MacOS' && matrix.format_lib == 'fmtlib'
      run: |
        brew update
        brew install fmt

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -DENABLE_ANALYZERS=ON
        -DENABLE_FORMATTERS=ON
        -DENABLE_SANITIZERS=ON
        ${{ runner.os == 'Linux' && '-DIwyu_EXECUTABLE=/opt/iwyu/bin/include-what-you-use' || '' }}
        ${{ matrix.format_lib == 'std' && '-DENABLE_FMTLIB_HO=OFF' || '' }}
        ${{ matrix.c_compiler == 'clang' && '-DCMAKE_CXX_FLAGS="-stdlib=libc++" -DCMAKE_EXE_LINKER_FLAGS="-lc++abi"' || '' }}
        -S ${{ github.workspace }}

    - name: Check formatting
      # Run only on Ubuntu 22.04 because we need clang-format >= 17.0 for this
      if: matrix.os == 'ubuntu-24.04'
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --target formatcheck

    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest --build-config ${{ matrix.build_type }}
